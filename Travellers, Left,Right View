Inorder Travellers:

   List<int> ans = new List<int>();
    public IList<int> InorderTraversal(TreeNode root) {
       
        if(root == null) return ans;
        InorderTraversal(root.left);
        ans.Add(root.value);
        InorderTraversal(root.right);
        return ans;
    }

Left View :

 public List<int> LeftView(TreeNode root)
    {
        List<int> result = new List<int>();

        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);

        while(queue.Count > 0)
        {
            int levelsize = queue.Count;
            for(int i=0; i<levelsize; i++)
            {
                TreeNode currentnode  = queue.Dequeue();
            if(i == 0)
            {
                result.Add(currentnode.value);
            }
            if(currentnode.left != null)
            {
                queue.Enqueue(currentnode.left);
            }
            if(currentnode.right != null)
            {
                queue.Enqueue(currentnode.right);
            }

            }

            
        }
        
        return result;

    }


Right View:

 public List<int> RightView(TreeNode root)
    {
        List<int> result = new List<int>();

        Queue<TreeNode> queue = new Queue<TreeNode>();
        queue.Enqueue(root);

        while(queue.Count > 0)
        {
            int level = queue.Count;

            for(int i=0; i<level; i++)
            {
                TreeNode current = queue.Dequeue();

                if(i==level-1)
                {
                    result.Add(current.value);
                }
                if(current.left != null)
                {
                    queue.Enqueue(current.left);
                }
                if(current.right != null)
                {
                    queue.Enqueue(current.right);
                }

            }
        }



        return result;

    }

