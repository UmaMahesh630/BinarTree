
Given a Binary Tree, you need to find all the possible paths from the root node to all the leaf nodes of the binary tree.

Note: The paths should be returned such that paths from the left subtree of any node are listed first, followed by paths from the right subtree.
Input: [1,2,3,4,5]
Output: [[1, 2, 4], [1, 2, 5], [1, 3]] 
    public IList<string> Binarysearchtreeaths(TreeNode root)
    {
        var result = new List<string>();

        if(root.left == null && root.right == null)
        {
            result.Add(root.value.ToString());
            return result;
        }

        foreach(var path in Binarysearchtreeaths(root.left))
        {
            result.Add(root.value +" "+path);
        }

        foreach (var path in Binarysearchtreeaths(root.right))
        {
            result.Add(root.value +" "+path);
            
        }
        return result;

    }

    public IList<string> BinaryTreepaths(TreeNode root)
    {
        var paths = new List<string>();
        if(root == null) return paths;

        DFS(root, "", paths);

    }
    private void DFS(TreeNode node,string path, IList<string> bpath)
    {

        if(node == null)
        {
            return;
        }
        path = path+node.value;

        if(node.left == null && node.right == null)
        {
            bpath.Add(path);
            return;
        }

        path += "->";
        
        DFS(node.left,path,bpath);
        DFS(node.right,path,bpath);
    }
